<!DOCTYPE html>
<html lang="en">
  <% include header %>
  <body>
    <% include navbar %>

    <div class="container">
      <div class="page-header">
        <h1>
          Whizard<small>GUI</small>
          <img src="images/Whizard-Logo.jpg" width="5%" height="auto">
        </h1>
      </div>

      <div class="row">
        <div class="col-md-6">
          <div class="panel panel-primary">
            <div class="panel-heading">Settings</div>
            <div class="panel-body">
              <div>
                <!-- Nav tabs -->
                <ul class="nav nav-tabs" role="tablist">
                  <li role="presentation" class="active"><a href="#basic" aria-controls="home" role="tab" data-toggle="tab">Basic Settings</a></li>
                  <li role="presentation"><a href="#int" aria-controls="int" role="tab" data-toggle="tab" id="tab_button_integrate">Integration</a></li>
                  <li role="presentation"><a href="#sim" aria-controls="sim" role="tab" data-toggle="tab" id="tab_button_simulate">Simulation</a></li>
                  <li role="presentation"><a href="#cuts" aria-controls="cuts" role="tab" id="tab_button_cuts" data-toggle="tab">Cuts</a></li>
                  <li role="presentation"><a href="#scan" aria-controls="scan" role="tab" data-toggle="tab" id="tab_button_scan">Scan</a></li>
                  <li role="presentation"><a href="#nlo" aria-controls="nlo" role="tab" data-toggle="tab">NLO</a></li>
                  <li role="presentation"><a href="#beams" aria-controls="beams" role="tab" data-toggle="tab">Beams</a></li>
                  <li role="presentation"><a href="#preview" aria-controls="preview" role="tab" data-toggle="tab" id="tab_button_preview"><span class="glyphicon glyphicon-search" aria-hidden="true"></span> Preview file</a></li>
                </ul>

                <!-- Tab panes -->
                <div class="tab-content">
                  <!-- Basic settings -->
                  <br />
                  <div role="tabpanel" class="tab-pane active" id="basic">

                    <form class="form-horizontal">
                      <div class="form-group">
                        <label class="col-sm-2 control-label">Aliases</label>
                        <div class="col-sm-10">

                          <div class="input-group" style="">
                            <input type="text" class="form-control" id="conf-alias-lhs">
                            <span class="input-group-addon" style="border-left: 0; border-right: 0;">:=</span>
                            <div class="input-group">
                              <input type="text" class="form-control" id="conf-alias-rhs">
                            </div>

                            <div class="input-group-btn">
                              <button type="button" class="btn btn-default" id="button_alias">Add</button>
                              <button id="show-alias" type="button" class="btn btn-default dropdown-toggle" data-toggle="popover" rel="popover_aliases" data-original-title="Registered Aliases" data-trigger="focus">Show All <span class="caret"></span></button>

                            </div><!-- /btn-group -->
                          </div><!-- /input-group -->
                        </div>
                      </div>

                      <form class="form-horizontal">
                        <div class="form-group">
                          <label class="col-sm-2 control-label">Process</label>
                          <div class="col-sm-10">

                            <div class="input-group" style="">
                              <input type="text" class="form-control" id="conf-process-in">
                              <span class="input-group-addon" style="border-left: 0; border-right: 0;">=></span>
                              <div class="input-group">
                                <input type="text" class="form-control" id="conf-process-out">
                              </div>

                              <div class="input-group-btn">
                                <button id="conf-model" type="button" class="btn btn-default dropdown-toggle" data-toggle="popover" rel="popover" data-original-title="Select a Model" data-trigger="focus">SM <span class="caret"></span></button>
                                <button type="button" class="btn btn-default" id="button-add-process">Add</button>
                                <button id="show-process" type="button" class="btn btn-default dropdown-toggle" data-toggle="popover" rel="popover_process" data-original-title="Registered Processes" data-trigger="focus">Show All <span class="caret"></span></button>

                              </div><!-- /btn-group -->
                            </div><!-- /input-group -->
                          </div>
                        </div>

                        <div class="form-group">
                          <label for="inputPassword3" class="col-sm-2 control-label">Additional code</label>
                          <div class="col-sm-10">
                            <textarea class="form-control" rows="3" id="conf-additional"></textarea>
                          </div>
                        </div>


                      </form>

                  </div>

                  <!-- TAB: Integration -->
                  <div role="tabpanel" class="tab-pane" id="int">
                    <div class="row">
                      <div class="col-sm-4">
                        <div id="integrate-process-list"></div>
                      </div>
                      <div class="col-sm-1"></div>
                      <div class="col-sm-7 integrate-right">
                        <div class="checkbox">
                          <label>
                            <form name="form-nlo">
                              <input id="conf-int-nlo" name="checkbox" type="checkbox">
                              <strong>Integrate NLO</strong>
                            </form>
                          </label>
                        </div>
                        <div class="form-group">
                          <label>CMS energy</label>
                          <input type="text" class="form-control" id="conf-int-sqrts">
                        </div>
                        <div class="form-group">
                          <label>Number of iterations</label>
                          <input type="text" class="form-control" id="conf-int-itt">
                        </div>
                        <div class="form-group">
                          <label>Number of Calls per Iteration</label>
                          <input type="text" class="form-control" id="conf-int-cpi">
                        </div>
                      </div>
                    </div>
                  </div>

                  <!-- TAB: Simulate -->
                  <div role="tabpanel" class="tab-pane" id="sim">
                    <div class="row">
                      <div class="col-sm-4">
                        <div id="simulate-process-list"></div>
                      </div>
                      <div class="col-sm-1"></div>
                      <div class="col-sm-7 simulate-right">
                        <div class="checkbox">
                          <label>
                            <form name="form-sim">
                              <input id="conf-sim-sim" name="checkbox" type="checkbox"><strong>Simulate this process</strong>
                            </form>
                          </label>
                        </div>
                        <div class="form-group">
                          <label>Events</label>
                          <input type="text" class="form-control" id="conf-sim-events">
                        </div>
                        <!-- START OF HISTOGRAM -->
                        <div class="checkbox">
                          <label>
                            <form name="form-sim">
                              <input id="conf-sim-hist" name="checkbox" type="checkbox"><strong>Histogram</strong>
                            </form>
                          </label>
                        </div>
                        <div id="struct-sim-hist">
                          <div class="form-group" id="conf-sim-hist-cont-title">
                            <label>Title</label>
                            <input type="text" class="form-control" id="conf-sim-hist-title">
                          </div>
                          <div class="form-group" id="sim-hist-cont-antype">
                            <label>X-label</label>
                            <input type="text" class="form-control" id="conf-sim-hist-x">
                          </div>
                          <div class="row" id="sim-hist-bounds">
                            <div class="col-sm-4">
                              <div class="form-group">
                                <label>x-min</label>
                                <input type="text" class="form-control" id="conf-sim-hist-minx">
                              </div>
                            </div>
                            <div class="col-sm-4">
                              <div class="form-group">
                                <label>x-max</label>
                                <input type="text" class="form-control" id="conf-sim-hist-maxx">
                              </div>
                            </div>
                            <div class="col-sm-4">
                              <div class="form-group">
                                <label>Ticks</label>
                                <input type="text" class="form-control" id="conf-sim-hist-ticks">
                              </div>
                            </div>
                          </div>
                          <div class="row" id="conf-sim-hist-cont-type">
                            <div class="col-sm-6"><strong>Analysis type</strong></div>
                            <div class="col-sm-6">
                              <div class="form-group">
                                <div class="dropdown">
                                  <button id="sim-hist-analysis" class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                    Angular Distribution
                                    <span class="caret"></span>
                                  </button>
                                  <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
                                    <li><a class="sim-hist-analysis" key="cos (Theta)" href="#">Angular Distribution</a></li>
                                    <li><a class="sim-hist-analysis" key="Pt" href="#">Transverse Momentum</a></li>
                                    <li><a class="sim-hist-analysis" key="M" href="#">Invariant Mass</a></li>
                                    <li><a class="sim-hist-analysis" key="Pt" href="#">Separated link</a></li>
                                  </ul>
                                </div>
                              </div>
                            </div>
                          </div>
                          <div class="row" id="sim-hist-cont-sub">
                            <div class="col-sm-6"><strong>Subevent</strong></div>
                            <div class="col-sm-6"><input type="text" class="form-control" id="conf-sim-hist-subevent" data-toggle="popover_simulation_hist" data-original-title="Subevents"></div>
                          </div>
                        </div>
                        <!-- END OF HISTOGRAM -->
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-sm-4"></div>
                      <div class="col-sm-1"></div>
                      <div class="col-sm-7 simulate-right"></div>
                    </div>
                  </div>

                  <!-- Start of Cuts Tab -->
                  <div role="tabpanel" class="tab-pane" id="cuts">
                    <div id="cutsContainer"></div>
                    <button type="button" class="btn btn-default top17 cuts-newcut">New Cut</button>
                    <div id="cuts-html-particles" class="row top17 centered-pills">
                      <ul class="nav nav-pills" id="cuts-html-particles-list">
                      </ul>
                    </div>
                  </div>

                  <!-- TAB:SCAN -->
                  <div role="tabpanel" class="tab-pane" id="scan">
                    <div class="row">
                      <div class="col-sm-4">
                        <div id="scan-process-list"></div>
                      </div>
                      <div class="col-sm-1"></div>
                      <div class="col-sm-7 scan-right">
                        <div class="checkbox">
                          <label>
                            <form name="form-scan">
                              <input id="conf-scan-check" name="checkbox" type="checkbox"><strong>Enable scan for this process</strong>
                            </form>
                          </label>
                        </div>
                        <div id="struct-scan">
                          <div class="row">
                            <div class="col-sm-4">
                              <button type="button" class="btn btn-default topbottom10 scan-newscan">New Scan</button>
                            </div>
                            <div class="col-sm-4">
                              <div class="form-group">
                                <div class="dropdown">
                                  <button id="sim-hist-analysis2" class="btn btn-primary topbottom10 dropdown-toggle"
                                                                  type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                    Scan Energy
                                    <span class="caret"></span>
                                  </button>
                                  <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
                                    <li><a class="sim-hist-analysis2" key="E" href="#">Scan Energy</a></li>
                                    <li><a class="sim-hist-analysis2" key="Pt" href="#">2</a></li>
                                    <li><a class="sim-hist-analysis2" key="M" href="#">3</a></li>
                                    <li><a class="sim-hist-analysis2" key="Pt" href="#">4</a></li>
                                  </ul>
                                </div>
                              </div>
                            </div>
                            <div class="col-sm-4">
                              <button type="button" class="btn btn-danger topbottom10 scan-clean">Clean Scans</button>
                            </div>
                          </div>
                          <div id="scansContainer">
                            <div class="row">
                              <div class="col-sm-1">
                                <span class="glyphicon glyphicon-search"  aria-hidden="true"></span>
                              </div>
                              <div class="col-sm-4">
                                <div class="form-group">
                                  <input type="text" class="form-control" id="conf-scan-min" placeholder="Min value">
                                </div>
                              </div>
                              <div class="col-sm-4">
                                <div class="form-group">
                                  <input type="text" class="form-control" id="conf-scan-max" placeholder="Max value">
                                </div>
                              </div>
                              <div class="col-sm-3">
                                <div class="form-group">
                                  <input type="text" class="form-control" id="conf-scan-inc" placeholder="Increment">
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        <!-- START OF PLOT LINESHAPE -->
                        <div class="panel panel-info" id="struct-scan-plot">
                          <div class="panel-heading">
                            <h3 class="panel-title">Plot</h3>
                          </div>
                          <div class="panel-body">
                            <div class="form-group" id="scan-line-title">
                              <label>Title</label>
                              <input type="text" class="form-control" id="scan-plot-title">
                            </div>
                            <div class="form-group" id="scan-line-x">
                              <label>X-label</label>
                              <input type="text" class="form-control" id="scan-plot-xlabel">
                            </div>
                            <div class="form-group" id="scan-line-y">
                              <label>Y-label</label>
                              <input type="text" class="form-control" id="scan-plot-ylabel">
                            </div>
                            <div class="row" id="sim-hist-bounds">
                              <div class="col-sm-6">
                                <div class="form-group">
                                  <label>x-min</label>
                                  <input type="text" class="form-control" id="scan-plot-xmin">
                                </div>
                              </div>
                              <div class="col-sm-6">
                                <div class="form-group">
                                  <label>x-max</label>
                                  <input type="text" class="form-control" id="scan-plot-xmax">
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        <!-- END OF PLOT LINESHAPE -->
                      </div>
                    </div>
                  </div>

                  <div role="tabpanel" class="tab-pane" id="nlo">.D..</div>
                  <div role="tabpanel" class="tab-pane" id="beams">beams stuff</div>
                  <div role="tabpanel" class="tab-pane" id="preview"></div>
                </div>
              </div>
              <br><br>
              <p class="btn-block">
              <div class="btn-group" role="group" aria-label="...">
                <button type="button" class="btn btn-primary btn-lg savesin">Save Sindarin</button>
                <div class="btn-group">
                  <button type="button" class="btn btn-success btn-lg runwhiz">Run Whizard</button>
                  <button type="button" class="btn btn-success btn-lg dropdown-toggle runarrow" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span class="caret"></span>
                    <span class="sr-only">Toggle Dropdown</span>
                  </button>
                  <ul class="dropdown-menu">
                    <li><a class="runwhiz" opt="--rebuild" href="#">Run & Rebuild All</a></li>
                    <li><a class="runwhiz" opt="--rebuild-events" href="#">Run & Rebuild Events</a></li>
                    <li><a class="runwhiz" opt="--rebuild-grids" href="#">Run & Integrate</a></li>
                  </ul>
                </div>
              </div>
              </p>
              <p id="controller"></p>
            </div>
          </div>
        </div>

        <!-- Output container -->
        <div class="col-md-6">
          <div class="panel panel-primary">
            <div class="panel-heading">Output</div>
            <div class="panel-body" >
              <div>
                <!-- Nav tabs -->
              <ul class="nav nav-tabs" role="tablist">
                <li role="presentation" class="active"><a href="#out_whiz" aria-controls="out_whiz" role="tab" data-toggle="tab">Log</a></li>
                <li role="presentation"><a href="#out_hist" aria-controls="out_hist" role="tab" data-toggle="tab">Plots</a></li>
              </ul>

              <!-- Loader -->
              <div id="pbar">
                <div class="loader"></div>
              </div>

              <!-- Output TAB Panel -->
              <div class="tab-content">
                <div role="tabpanel" class="tab-pane active" id="out_whiz">
                  <div class="panel-body outputcontainer">
                    <pre id="whizoutput" style="max-height: 700px;"></pre>
                  </div>
                </div>

                <div role="tabpanel" class="tab-pane" id="out_hist">
                  <!-- AM: under consideration
                    <embed id="out-hist-pdf" src="" width="100%" height="700px">
                  -->
                </div>
              </div>
              </div>

            </div>
          </div>

        </div>
      </div>

      <hr>

      <!-- Models popover container -->
      <div id ="pop_models" style="visibility: hidden;"></div>
      <!-- Alias popover container -->
      <div id="pop_aliases" style="visibility: hidden;"></div>

      <!-- Process popover container -->
      <div id="pop_process" style="visibility: hidden;"></div>

      <!-- Simulation-Histogram-popover -->
      <div style="visibility: hidden;" id="pop_sim_subevent" class="row top17 centered-pills">
        <ul class="nav nav-pills" id="pop_sim_subevent_list" role="tablist">
        </ul>
      </div>


      <% include footer %>
    </div>
    <!-- /container -->

    <!-- Bootstrap core JavaScript
      ================================================== -->
      <!-- Placed at the end of the document so the pages load faster -->
      <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
      <script src="https://code.jquery.com/jquery.js"></script>
      <!-- Latest compiled and minified JavaScript -->
      <script src="controllers/bootstrap.min.js"></script>
      <script src="controllers/gui.config.js"></script>
      <script src="controllers/generic.js"></script>
      <script src="controllers/cuts.js"></script>
      <script src="controllers/constructSindarin.js"></script>
      <script src="controllers/models.js"></script>
      <script src="controllers/examples.js"></script>
      <script src="controllers/alias.js"></script>
      <script src="controllers/process.js"></script>
      <script src="controllers/tabs.scan.js"></script>
      <script src="controllers/tabs.integration.js"></script>
      <script src="controllers/tabs.simulate.js"></script>

      <script type="text/javascript">

/*
*  Hiding whatever needed
 */
      $(".simulate-right, .integrate-right").hide();

      /*
       *  Constructing models list
       */
      var Models = fillModelList();

      var ToolbarColumns = 4;
      for(var k = 0; k < Models.length; k += ToolbarColumns)
{
  $("#pop_models").append('<div class="row">');
  for(var i = k; i < k + ToolbarColumns; i++)
  {
    var modelName = (Models[i] === undefined) ? "&nbsp;" : Models[i].modelName;
    var modelDescription = (Models[i] === undefined) ? "&nbsp;" : Models[i].description;
    $("#pop_models").append('<div class="col-md-3"><a href="javascript:;" title="' + modelDescription + '" class="model">' + modelName + '</a></div>');
  }
  $("#pop_models").append('</div>');
}

/*
 *    Generate process list to choose setups from
 */
function DisplayProcessList (ProcessList) {
  /*
   * Constructing integration list
   */
  $("#integrate-process-list").empty();
  for (var i=0; i<ProcessList.length; i++) {
    if (ProcessList[i] === null) continue;
    var ip1 = i+1;
    var Name = T(constructTex(ProcessList[i].Name()), ProcessList[i].Name());
    $("#integrate-process-list").append(
        '<a href="#" class="list-group-item process-entry" process-id="' + ip1 + '">' +
        Name + '</a>');
  }

  /*
   *  Constructing simulation list
   */
  $("#simulate-process-list").empty();
  for(var i = 0; i < ProcessList.length; i++)
  {
    if (ProcessList[i] === null) continue;
    var CSSClass = SimulateList[i].status ? "label-success": "label-default";
    var Text = SimulateList[i].status ? "On" : "Off";
    var Name = T(constructTex(ProcessList[i].Name()), ProcessList[i].Name());
    $("#simulate-process-list").append('<a href="#" class="list-group-item process-entry-sim" process-id="' + i + '">' +
        Name + '<br><span id="proc_indicator_'+i+'" class="label '+CSSClass+'">'+ Text +'</span></a>');
  }

  /*
   *  Constructing process list for TABS:scan
   */
  $("#scan-process-list").empty();
  for(var i = 0; i < ProcessList.length; i++)
  {
    if (ProcessList[i] === null) continue;
    var CSSClass = ScansList[i].status ? "label-success": "label-default";
    var Text = ScansList[i].status ? "On" : "Off";
    var Name = T(constructTex(ProcessList[i].Name()), ProcessList[i].Name());
    $("#scan-process-list").append('<a href="#" class="list-group-item process-entry-scan" process-id="' + i + '">' +
        Name + '<br><span id="proc_indicator_scan_'+i+'" class="label '+CSSClass+'">'+Text+'</span></a>');
  }

  /*
   * If no process added, suggest adding one
   */
  if (ProcessList.filter(function(value) { return value !== null }).length == 0) {
    $("#simulate-process-list").html("Please add a process.");
    $("#integrate-process-list").html("Please add a process.");
    $("#scan-process-list").html("Please add a process.");
    $(".simulate-right, .integrate-right, .scan-right").hide();
  }
}

function CleanAll() {
  $('input[type="text"]').val('');
  $('#conf-additional').val('');
  CleanAlias();
  cuts.Clean();
  Scan.Clean();
  ProcessList = [];
  SimulateList = [];
  ScansList = [];
}

function RebuildPreviewTab()
{
  rebuildVariables();
  $("#preview").html("<pre>" + SindarinScript + "</pre>");
  }

  /*
  * Working variables
  */

  // Contains sindarin script
  var SindarinScript = "";
  var activeProcessId = -1;
  var WhizRunning = false;


  function rebuildVariables() {
  var SindarinList = new Array();

  //if ($("#conf-additional").val() )
  //  SindarinList.push (new SindarinCommand ( $("#conf-additional").val() ));

  //SindarinList.push (new SindarinAssignment ("model", $("#conf-model").text()));
  var model = new SindarinModel ($("#conf-model").text());
  SindarinList.push (new SindarinModelData (model));

  //Additional code
  if ($("#conf-additional").val()) {
  var AdditionalCode = new SindarinAdditionalCode($("#conf-additional").val() );
  SindarinList.push(AdditionalCode);
  }

  /* Only use the field if process list is empty */

  for(var i = 0; i < ProcessList.length; i++)
  if (ProcessList[i] !== null) SindarinList.push (ProcessList[i]);


  if ($("#conf-beams").val() )
  SindarinList.push (new SindarinAssignment ("beams", $("#conf-beams").val() + " => " + $("#conf-pdf").text()));

  /*
  *  Add Cuts (cuts.js)
  */
  var Cuts = cuts.getCutsArray();
  var NewLineStarter = '\n\t and ';
  if (Cuts.length > 0)
  {
  var CutsRHS = "";
  for(var i = 0; i < Cuts.length; i++)
  CutsRHS += Cuts[i] + NewLineStarter;
  CutsRHS = CutsRHS.substring(0, CutsRHS.length - NewLineStarter.length);

  SindarinList.push ( new SindarinCuts(CutsRHS) );
  //SindarinList.push (new SindarinAssignment ("cuts", CutsRHS));
  }

  /*
  *   Access Scans data
  */
  ExtAssignScans();



  SindarinList = SindarinList.concat(ExternalSindarinList);
  SindarinList = SindarinList.concat(SimulateList); ///!

  var a = new SindarinGenerator (SindarinList);
  SindarinScript = a.construct ();
  }

  /*
  * Creates a message box with appropriate style class
  * style = [alert-success, alert-warning, alert-danger]
  */
  function MessageGUI(str, style)
  {
  $("#controller").after('<div id="gui-box" class="alert ' + style + ' alert-dismissible" role="alert"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button><p id="gui-message">'+str+'</p></div>' );
  }

  $(document).ready(function() {
  $(".outputcontainer").hide();
  $("#pbar").hide();
  $("#form-events, #form-calls, #form-iterations").hide();
  $("#gui-box").hide();

  $("#button_alias").click(function() {

  /* Checking if both fields are non-empty */
  if ($("#conf-alias-lhs").val() && $("#conf-alias-rhs").val()) {

  AddAlias($("#conf-alias-lhs").val(), $("#conf-alias-rhs").val());
  rebuildAliasList();

  MessageGUI("New alias is added.", "alert-success");
  $("#conf-alias-lhs").val("");
  $("#conf-alias-rhs").val("");
  }
  });

  /*
  * Button: Add process
  */
  $("#button-add-process").click(function() {
  /* Checking if process input non empty */
  if ($("#conf-process-in").val() && $("#conf-process-out").val()) {
  AddProcess(parseParticleNameString($("#conf-process-in").val()),
  parseParticleNameString($("#conf-process-out").val()));


  MessageGUI("New process is added.", "alert-success");
  } else {
  var incoming_missing = "";
  var outgoing_missing = "";
  if (!$("#conf-process-in").val()) incoming_missing = "No incoming particles";
  if (!$("#conf-process-out").val()) outgoing_missing = "No outgoing particles";
  MessageGUI("Adding process failed! " + incoming_missing + " " +
  outgoing_missing, "alert-danger");
  }
  });

  /*
  *  Mini-button: Remove process
  */
  $(document).on("click", ".process-remove", function() {
  var id = $(this).attr("process-id");

  /*
  *  Nescessary to remove process element entirely.
  */
  ProcessList[id] = null;
  ProcessList.splice(id, 1); // No longer keeping nulls in the array
  rebuildProcessList();

  removeSimulateElement(id);
  });

  /*
  * Integrate checked, show #form-iterations and #for-calls
  */
  $("#conf-integrate").change(function() {
  if ($(this).prop('checked')) {
  $("#form-iterations").fadeIn("fast");
  $("#form-calls").fadeIn("fast");
  } else {
  $("#form-iterations").fadeOut("fast");
  $("#form-calls").fadeOut("fast");
  }
  });

  $("#conf-int-nlo").change(function() {
  try {
  if (activeProcessId < 0) throw ("Please select a process");
  if ($(this).prop('checked')) {
  ProcessList[activeProcessId].setNlo (true);
  } else {
  ProcessList[activeProcessId].setNlo (false);
  }
  } catch (err) {
  MessageGUI(err, "alert-danger");
  }
  });

  $("#conf-int-sqrts").change(function() {
  try {
  if (activeProcessId < 0) throw ("Please select a process");
  ProcessList[activeProcessId].setSqrts ($(this).val());
  } catch (err) {
  MessageGUI(err, "alert-danger");
  }
  });

  $("#conf-int-itt").change(function() {
  try {
  if (activeProcessId < 0) throw ("Please select a process");
  ProcessList[activeProcessId].setNIter ($(this).val());
  } catch (err) {
  MessageGUI(err, "alert-danger");
  }
  });

  $("#conf-int-cpi").change(function() {
  try {
  if (activeProcessId < 0) throw ("Please select a process");
  ProcessList[activeProcessId].setNCalls ($(this).val());
  } catch (err) {
  MessageGUI(err, "alert-danger");
  }
  });


  $(document).on("click", ".process-entry", function () {
  activeProcessId = $(this).attr("process-id") - 1;
  p = ProcessList[activeProcessId];
  if (!p.isNlo ()) {
  $("#conf-int-nlo").prop('checked', false);
  } else {
  $("#conf-int-nlo").prop('checked', true);
  }
  $("#conf-int-itt").val (p.getNIter());
  $("#conf-int-cpi").val (p.getNCalls());
  $("#conf-int-sqrts").val (p.getSqrts());

  $(".integrate-right").fadeIn("fast");
  });

  $(document).on("click", ".process-entry-sim", function () {
  activeProcessId = $(this).attr("process-id");
  p = SimulateList[activeProcessId];

  //Fill simulate fields
  $("#conf-sim-sim").prop('checked', p.getStatus());
  $("#conf-sim-events").val(p.getEvents());

  //Fill histogram fields
  Simulate.FillHistogramFieldsHTML();

  //Process selected show right column
  $(".simulate-right").fadeIn("fast");

  });

  /*
  * Simulate checked, show form-events
  */
  $("#conf-simulate").change(function() {
  if ($(this).prop('checked'))
  $("#form-events").fadeIn("fast");
  else
  $("#form-events").fadeOut("fast");
  });

  /*
  * Tab preview clicked, generate script
  */
  $("#tab_button_preview").click(function() {
  rebuildVariables();
  RebuildPreviewTab();
  });

  /*
  *  Changing tab, rebuild process list
  */
  $("#tab_button_integrate, #tab_button_simulate, #tab_button_scan").click(function() {
  DisplayProcessList (ProcessList);
  });

  /*
  * Tab Cuts clicked, generate particles list
  */
  $("#tab_button_cuts").click(function() {
  cuts.RebuildParticlesHTML();
  });

  /*
  * Tab Simulate clicked, generate particles popup list
  */
  $("#tab_button_simulate").click(function() {
  Simulate.RebuildParticlesHTML();
  });

  /*
  * Clicking on the model
  */
  $(document).on("click", ".model", function() {
  $("#conf-model").html($(this).text() + ' <span class="caret"></span>');
  });

  /*
  *  Remove Alias
  */
  $(document).on("click", ".alias-remove", function() {
  var id = $(this).attr("alias-id");
  ExternalSindarinList.splice(id, 1);
  rebuildAliasList();
  });

  /*
  * Button: Save Sindarin
  */
  $(".savesin").click(function() {
  rebuildVariables();
  $.post('/savesin', { src: SindarinScript }, function(data) {
  MessageGUI(data, "alert-success");
  });
  });

  /*
  * Button: Run Whizard
  */
  $(".runwhiz").click(function() {
  //Run option: [--rebuild-events, --rebuild-grids, --rebuild]
  var option = (typeof $(this).attr("opt") != 'undefined')? $(this).attr("opt") : "";

  //Animation
  $("#pbar").show();
  $("#whizoutput").fadeOut("fast");
  $(".outputcontainer").fadeOut("fast");

  //Functionality
  $(".runwhiz, .runarrow").attr("disabled", "disabled");
  rebuildVariables();
  WhizRunning = true;
  MonitorLogChanges();

  $.post('/runwhiz', { src: SindarinScript, option: option }, function(data) {
  //Animation
  $(".outputcontainer").fadeIn("fast");
  $("#pbar").fadeOut("fast");

  //Functionality
  WhizRunning = false;
  $(".runwhiz, .runarrow").removeAttr("disabled");
  /* Display output whizard file */
  $("#whizoutput").load( "whizard.log" ).fadeIn("fast");
  /* Display pdf (assuming there exists one for now) */
  $("#out_hist").html('<embed src="whizard_analysis.pdf" width="100%" height="700px">');

    /*
    *  Whiz->GUI error parser
    *  AM: check for other keywords, change method
    */
    var CritKeyword = 'FATAL ERROR:';
    var str = $.ajax({ url: "whizard.log",  async: false}).responseText;

    if (str.indexOf(CritKeyword) > -1) {
    var s=str.substring(str.lastIndexOf(CritKeyword),str.lastIndexOf('*')).replace(/\*/g,'');
    if (s)
    MessageGUI(s, 'alert-danger');
    }

    });

    });



    /* Design stuff */
    $('[rel=popover]').popover({
    html : true,
    content: function() {
    return $('#pop_models').html();
    }
    });

    $('[rel=popover_aliases]').popover({
    html : true,
    content: function() {
    return $('#pop_aliases').html();
    }
    });

    $('[rel=popover_process]').popover({
    html : true,
    content: function() {
    return $('#pop_process').html();
    }
    });

    /*
    * Popover for histogram
    */
    $('[data-toggle=popover_simulation_hist]').popover({
    html : true,
    content: function() {
    return $('#pop_sim_subevent').html();
    }
    });
    });

      </script>

  </body>
</html>
