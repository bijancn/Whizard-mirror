* Test output: commands_4
*   Purpose: define process and compile library

*  Initialization

*  Input file

model = "Test"
process t4 = s, s => s, s
compile ("lib_cmd4")

*  Parse file

Parse tree:
+  <command_list>  =  <cmd_model> <cmd_process> <cmd_compile>
|  +  <cmd_model>  =  model '=' <string_literal>
|  |  +  model  = [keyword] model
|  |  +  '='  = [keyword] =
|  |  +  <string_literal>  = "Test"
|  +  <cmd_process>  =  process <process_id> '=' <process_prt> '=>' <prt_state_list>
|  |  +  process  = [keyword] process
|  |  +  <process_id>  = t4
|  |  +  '='  = [keyword] =
|  |  +  <process_prt>  =  <cexpr> <cexpr>
|  |  |  +  <cexpr>  =  <variable>
|  |  |  |  +  <variable>  = s
|  |  |  +  <cexpr>  =  <variable>
|  |  |  |  +  <variable>  = s
|  |  +  '=>'  = [keyword] =>
|  |  +  <prt_state_list>  =  <prt_state_sum> <prt_state_sum>
|  |  |  +  <prt_state_sum>  =  <cexpr>
|  |  |  |  +  <cexpr>  =  <variable>
|  |  |  |  |  +  <variable>  = s
|  |  |  +  <prt_state_sum>  =  <cexpr>
|  |  |  |  +  <cexpr>  =  <variable>
|  |  |  |  |  +  <variable>  = s
|  +  <cmd_compile>  =  <compile_cmd>
|  |  +  <compile_cmd>  =  <compile_clause> <compile_arg>
|  |  |  +  <compile_clause>  =  compile
|  |  |  |  +  compile  = [keyword] compile
|  |  |  +  <compile_arg>  =  <string_literal>
|  |  |  |  +  <string_literal>  = "lib_cmd4"

* Compile command list

 model = "Test"
 process: t4 (2 -> X)
 compile ("lib_cmd4")

* Execute command list

========================================================================
 Process library stack:
------------------------------------------------------------------------
 Process library: lib_cmd4
   external        = F
   makefile exists = F
   driver exists   = F
   code status     = a

 Process library entries: 1
 Entry #1: [a] t4.1 = int (test_me)

 Process #1:
 ID = 't4'
 Scattering
 Model = Test
 Initially defined component(s) = 1
 Extra generated component(s)   = 0
 MD5 sum   = 'EAA23902046A9ED2C0680B59BBEC61CF'
 Component #1
   Component ID        = t4_i1
   Initial component   = T
   N (in, out, tot)    = 2 2 4
   Particle content    = s, s => s, s
   Method              = unit_test
   Process variant     = test_me
   MD5 sum (def)       = '2A33B40C48140D76B5677C6720232AAE'
========================================================================

* Cleanup

* Test output end: commands_4
