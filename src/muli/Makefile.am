## Makefile.am -- Makefile for WHIZARD - Multiple Interactions
##
## Process this file with automake to produce Makefile.in
#
# Copyright (C) 1999-2014 by
#     Wolfgang Kilian <kilian@physik.uni-siegen.de>
#     Thorsten Ohl <ohl@physik.uni-wuerzburg.de>
#     Juergen Reuter <juergen.reuter@desy.de>
#     with contributions from
#     Hans-Werner Boschmann
#     Bijan Chokoufe <bijan.chokoufe@desy.de>
#     Christian Speckner <cnspeckn@googlemail.com>
#     Sebastian Schmidt
#     Daniel Wiesler
#
# WHIZARD is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# WHIZARD is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
########################################################################

## The files in this directory end up in an auxiliary libtool library.

if MPI_AVAILABLE
noinst_LTLIBRARIES = libmuli.la
else
noinst_LTLIBRARIES = libmuli_dummy.la
endif

libmuli_la_SOURCES = \
   muli_base.f90 \
   muli.f90 \
   muli_cuba.f90 \
   muli_momentum.f90 \
   muli_interactions.f90 \
   muli_trapezium.f90 \
   muli_fibonacci_tree.f90 \
   muli_aq.f90 \
   muli_dsigma.f90 \
   muli_remnant.f90 \
   muli_mcint.f90
libmuli_dummy_la_SOURCES = muli_dummy.f90

## Omitting this would exclude it from the distribution
dist_noinst_DATA = muli.nw

# Dump module names into file Modules
libmuli_Modules = ${libmuli_la_SOURCES:.f90=}
Modules: Makefile
	@rm -f $@
	for module in $(libmuli_Modules); do \
	  echo $$module >> $@; \
	done

## Fortran module dependencies
# Get module lists from other directories
module_lists = \
  ../basics/Modules \
  ../system/Modules 

$(module_lists):
	$(MAKE) -C `dirname $@` Modules

Module_dependencies.sed: $(module_lists)
	@rm -f $@
	echo 's/, *only:.*//' >> $@
	echo 's/, *&//' >> $@
	echo 's/, *.*=>.*//' >> $@
	echo 's/$$/.lo/' >> $@
	for list in $^; do \
		dir="`dirname $$list`"; \
		for mod in `cat $$list`; do \
			echo 's!: '$$mod'.lo$$!': $$dir/$$mod'.lo!' >> $@; \
		done ; \
	done

DISTCLEANFILES = Module_dependencies.sed

## Dependencies across directories and packages, if not automatically generated
$(libmuli_la_OBJECTS): \
  ../pdf_builtin/pdf_builtin.$(FC_MODULE_EXT)

## Fortran module dependencies
# The following line just says
#    include Makefile.depend
# but in a portable fashion (depending on automake's AM_MAKE_INCLUDE
@am__include@ @am__quote@Makefile.depend@am__quote@

Makefile.depend: Module_dependencies.sed
Makefile.depend: $(libmuli_la_SOURCES)
	@rm -f $@
	for src in $^; do \
		module="`basename $$src | sed 's/\.f[90][0358]//'`"; \
		grep '^ *use ' $$src \
			| grep -v '!NODEP!' \
			| sed -e 's/^ *use */'$$module'.lo: /' \
			-f Module_dependencies.sed; \
	done > $@

DISTCLEANFILES += Makefile.depend 

# Fortran90 module files are generated at the same time as object files
.lo.$(FC_MODULE_EXT):
	@:
#	touch $@

AM_FCFLAGS = -I../basics -I../system -I../../vamp/src/ -I../pdf_builtin -I../utilities
AM_FFLAGS =

########################################################################
## Default Fortran compiler options

## Profiling
if FC_USE_PROFILING
AM_FFLAGS += $(FCFLAGS_PROFILING)
AM_FCFLAGS += $(FCFLAGS_PROFILING)
endif

## OpenMP
if FC_USE_OPENMP
AM_FFLAGS += $(FCFLAGS_OPENMP)
AM_FCFLAGS += $(FCFLAGS_OPENMP)
endif

########################################################################

## (Re)create F90 sources from NOWEB source.
if NOWEB_AVAILABLE

PRELUDE = $(top_srcdir)/src/noweb-frame/whizard-prelude.nw
POSTLUDE = $(top_srcdir)/src/noweb-frame/whizard-postlude.nw

muli.stamp: $(PRELUDE) $(srcdir)/muli.nw $(POSTLUDE)
	@rm -f muli.tmp
	@touch muli.tmp
	for src in $(MULI_SRC); do \
		$(NOTANGLE) -R[[$$src]] $^ | $(CPIF) $$src; \
	done
	@mv -f muli.tmp muli.stamp

MULI_SRC = $(libmuli_la_SOURCES) $(libmuli_dummy_la_SOURCES)

$(MULI_SRC): muli.stamp
## Recover from the removal of $@
	@if test -f $@; then :; else \
		rm -f muli.stamp; \
		$(MAKE) $(AM_MAKEFLAGS) muli.stamp; \
	fi

endif

########################################################################
## Remove backup files
## Remove sources that can be recreated using NOWEB
if NOWEB_AVAILABLE
maintainer-clean-noweb:
	-rm -f *.f90 *.f
endif
.PHONY: maintainer-clean-noweb

## Remove those sources also if builddir and srcdir are different
if NOWEB_AVAILABLE
clean-noweb:
	test "$(srcdir)" != "." && rm -f *.f90 *.f || true
endif
.PHONY: clean-noweb

## Remove F90 module files
clean-local: clean-noweb
	-rm -f muli.stamp muli.tmp
	-rm -f *.$(FC_MODULE_EXT)

## Remove backup files
maintainer-clean-backup:
	-rm -f *~
.PHONY: maintainer-clean-backup

## Register additional clean targets
maintainer-clean-local: maintainer-clean-noweb maintainer-clean-backup
